<h3 class="no-num no-toc">Validation and Linking</h3>

<!-- FIXME: reference the compile-time validation section -->
<p>Validation of asm.js modules is intended to be performed eagerly at
parse time. If a module passes the <a href="#validation">static
validation requirements</a>, it is considered <dfn>statically
valid</dfn>.

<p>An asm.js module is a function that returns an object containing a
set of exported functions. A module function can take up to three
optional parameters:

<ul>
<!-- FIXME: fix this link -->
<li>a global object, providing the module with access to a limited
subset of the JavaScript <a href="">standard libraries</a>;
<li>a <dfn>foreign function interface</dfn> (FFI), providing the
module with access to arbitrary external JavaScript functions; and
<li>a <dfn>heap buffer</dfn>, providing a
single <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a>
to act as the asm.js heap.
</ul>

<p>Calling an asm.js module function is known
as linking. At link time, the asm.js module function
initializes the global variables and shared bindings used by the
module. In an AOT implementation, linking must perform additional
dynamic checks to ensure that the AOT-compiled code is safe to
execute. If all dynamic checks pass before the module function
returns, the resulting module is considered <dfn>dynamically
valid</dfn>. Otherwise, an engine may have to fall back to traditional
implementation strategies like implementation or JIT compilation.

<!-- FIXME: link to standard library section -->
<p>As a simple example, the following module imports the
standard <code>Math.sqrt</code> library function. At link time, the
engine must verify that the function extracted
from <code>global.Math.sqrt</code> is actually the original
<code>Math.sqrt</code> function of the JavaScript standard library:

<div class="example">
<pre>function DiagModule(global) {
    "use asm";

    var sqrt = global.Math.sqrt;

    function diag(x, y) {
        x = +x;
        y = +y;
        return +sqrt((x*x) + (y*y));
    }

    return { diag: diag };
}

var good = DiagModule(window);     // dynamically valid -- executes AOT version
console.log(good.diag(3, 4));      // 5

var bogusGlobal = {
    Math: {
        sqrt: function(x) { return x * 2; }
    }
};

var bad = DiagModule(bogusGlobal); // dynamically invalid -- executes interpreted version
console.log(bad.diag(3, 4));       // 50</pre>
</div>

<p>Because asm.js is a strict subset of JavaScript, failing either
static or dynamic validation must not change the observable behavior
of the program. To preserve full compatibility with JavaScript,
validation errors cannot raise exceptions, trigger application events,
or generally cause any side effects. However, environments may report
validation errors to a developer console.
