{
  "name": "asm.js",
  "description": "Tools for the asm.js subset of JavaScript",
  "main": "lib/asm.js",
  "version": "0.0.2",
  "engines": {
    "node": ">=0.8.2"
  },
  "author": {
    "name": "Dave Herman"
  },
  "license": "MIT",
  "dependencies": {
    "esprima": "1.0.4",
    "dict": "1.4.0",
    "array-extended": "0.0.4",
    "pattern-match": "0.3.0"
  },
  "devDependencies": {
    "nodeunit": "0.7.4"
  },
  "directories": {
    "lib": "./lib"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dherman/asm.js.git"
  },
  "keywords": [
    "javascript",
    "asm.js",
    "validator"
  ],
  "readme": "# asm.js\n\nA Mozilla Research project to specify and develop the extremely optimizable subset of JS targeted by compilers like Emscripten, Mandreel, and LLJS.\n\n## Example\n\n```javascript\nfunction mymodule(stdlib, foreign, heap) {\n    \"use asm\";\n\n    // -------------------------------------------------------------------------\n    // SECTION 1: globals\n\n    var H32 = new stdlib.Int32Array(heap);\n    var HU32 = new stdlib.Uint32Array(heap);\n    var log = foreign.consoleDotLog;\n\n    var g_i = 0;   // int global\n    var g_f = 0.0; // double global\n\n    // -------------------------------------------------------------------------\n    // SECTION 2: functions\n\n    function f(x, y) {\n        // SECTION A: parameter type declarations\n        x = x|0;      // int parameter\n        y = +y;       // double parameter\n\n        // SECTION B: function body\n        log(x|0);     // call into FFI -- must force the sign\n        log(y);       // call into FFI -- already know it's a double\n        x = (x+3)|0;  // signed addition\n\n        // SECTION C: unconditional return\n        return ((((x+1)|0)>>>0)/(x|0))>>>0; // compound expression\n    }\n\n    function g() {\n        g_f = +g_i; // read/write globals\n        return;\n    }\n    \n    function g2() {\n        return;\n    }\n\n    function h(i, x) {\n        i = i|0;\n        x = x|0;\n        H32[i>>2] = x;       // shifted by log2(byte count)\n        ftable_2[(x-2)&2](); // dynamic call of functions in table 2\n\n        // no return necessary when return type is void\n    }\n    \n    // -------------------------------------------------------------------------\n    // SECTION 3: function tables\n\n    var ftable_1 = [f];\n    var ftable_2 = [g, g2]; // all of the same type\n\n    // -------------------------------------------------------------------------\n    // SECTION 4: exports\n\n    return { f_export: f, goop: g };\n}\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dherman/asm.js/issues"
  },
  "homepage": "https://github.com/dherman/asm.js",
  "_id": "asm.js@0.0.2",
  "dist": {
    "shasum": "985153487b597368dd4d5ed13377ce3ae53e72f4"
  },
  "_from": "asm.js@",
  "_resolved": "https://registry.npmjs.org/asm.js/-/asm.js-0.0.2.tgz"
}
